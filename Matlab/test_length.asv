function test_length(ventana)
%TEST_LENGTH Prueba diferentes tamaños de ventana en la FFT
%   Permite realizar la FFT del archivo de entrada especificada con un
%   tamaño de ventana especificado como parametro.

close all;

FILE_IN = 'audio_prueba.wav';
FILE_OUT = 'tested_window_audio.wav';

[y, Fs] = audioread(FILE_IN);
L = y(:,1);
R = y(:,2);

Ts = 1/Fs;
max_time = (length(L)*Ts)-Ts;
t = 0:Ts:max_time;
f = Fs*(0:(length(L)/2))/length(L);

f1 = figure('Name','Stereo input signal','NumberTitle','off');
f3 = figure(['Name','Full Vs Specified length FFT (' num2str(ventana),')','NumberTitle','off']);
f4 = figure('Name','Stereo output signal','NumberTitle','off');

% Graficas de la entrada
figure(f1);
hold on;
subplot(3,1,1), plot(t,y), title('Both Channels'), xlabel('Time(s)'), ylabel('Amplitude');
subplot(3,1,2), plot(t,L), title('Left Channel'), xlabel('Time(s)'), ylabel('Amplitude');
subplot(3,1,3), plot(t,R), title('Right Channel'),xlabel('Time(s)'), ylabel('Amplitude');
hold off;

%Transformada directa para comprobar
comprobacion_freq = abs(fft(y));
comprobacion_t = real(ifft(comprobacion_freq));

PLaux = abs(comprobacion_freq(:,1)/length(L));
PL = PLaux(1:length(L)/2+1);
PL(2:end-1) = 2*PL(2:end-1);
PL_max = max(PL);
PL_plot_full = PL./PL_max;

PRaux = abs(comprobacion_freq(:,2)/length(R));
PR = PRaux(1:length(R)/2+1);
PR(2:end-1) = 2*PR(2:end-1);
PR_max = max(PR);
PR_plot_full = PR./PR_max;

%Transformada con la ventana especificada
num_bloques = floor(length(y)/ventana);
ultimo_bloque = mod(length(y),ventana);
result_L = zeros(size(L)); 
result_R = zeros(size(R)); 

for i = 0:num_bloques-1
    operandoL = L(i*ventana + 1:(i + 1)*ventana, 1);
    operandoR = R(i*ventana + 1:(i + 1)*ventana, 1);
    transformed_L = fft(operandoL);
    transformed_R = fft(operandoR);
    result_L(i*ventana + 1:(i + 1)*ventana, 1) = real(ifft(transformed_L));
    result_R(i*ventana + 1:(i + 1)*ventana, 1) = real(ifft(transformed_R));
end
% Ultimas muestras y padding
operandoL = zeros(ventana,1); 
operandoR = zeros(ventana,1);
operandoL(1:ultimo_bloque,1) = L(ventana*num_bloques + 1:end);
operandoR(1:ultimo_bloque,1) = R(ventana*num_bloques + 1:end);
transformed_L = fft(operandoL);
transformed_R = fft(operandoR);
result_L(num_bloques*ventana + 1:end, 1) = real(ifft(transformed_L));
result_R(num_bloques*ventana + 1:end, 1) = real(ifft(transformed_R));

%Graficamos para comparar
PLaux = abs(comprobacion_freq(:,1)/length(L));
PL = PLaux(1:length(L)/2+1);
PL(2:end-1) = 2*PL(2:end-1);
PL_max = max(PL);
PL_plot = PL./PL_max;

PRaux = abs(comprobacion_freq(:,2)/length(R));
PR = PRaux(1:length(R)/2+1);
PR(2:end-1) = 2*PR(2:end-1);
PR_max = max(PR);
PR_plot = PR./PR_max;

figure(f3);
hold on;
subplot(2,1,1), plot(f, PL_plot), title('FFT Left Channel'), xlabel('Frequency(Hz)');
subplot(2,1,2), plot(f, PR_plot), title('FFT Right Channel'),xlabel('Frequency(Hz)');
subplot(2,1,1), plot(f, PL_plot), title('FFT Left Channel'), xlabel('Frequency(Hz)');
subplot(2,1,2), plot(f, PR_plot), title('FFT Right Channel'),xlabel('Frequency(Hz)');
hold off;

% Montaje de la señal final
out(:,1) = result_L(:,1);
out(:,2) = result_R(:,1);

%Graficamos la salida
figure(f4);
hold on;
subplot(3,1,1), plot(t,out), title('Both Channels'), xlabel('Time(s)'), ylabel('Amplitude');
subplot(3,1,2), plot(t,final_L), title('Left Channel'), xlabel('Time(s)'), ylabel('Amplitude');
subplot(3,1,3), plot(t,final_R), title('Right Channel'),xlabel('Time(s)'), ylabel('Amplitude');
hold off;

% Reproducimos
% sound(out,Fs);

% Guardamos en un archivo .wav
audiowrite(FILE_OUT, out, Fs);



